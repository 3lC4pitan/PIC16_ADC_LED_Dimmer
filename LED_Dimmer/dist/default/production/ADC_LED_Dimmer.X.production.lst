

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Jun 22 17:41:30 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	dabs	1,0x7E,2
    12  0000                     
    13                           ; Version 2.00
    14                           ; Generated 27/05/2018 GMT
    15                           ; 
    16                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F877A Definitions
    45                           ; 
    46                           ; SFR Addresses
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  0006                     	;# 
    54  0007                     	;# 
    55  0008                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000D                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001D                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  0087                     	;# 
    86  0088                     	;# 
    87  0089                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  0091                     	;# 
    92  0092                     	;# 
    93  0093                     	;# 
    94  0094                     	;# 
    95  0098                     	;# 
    96  0099                     	;# 
    97  009C                     	;# 
    98  009D                     	;# 
    99  009E                     	;# 
   100  009F                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  010F                     	;# 
   105  018C                     	;# 
   106  018D                     	;# 
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  0007                     	;# 
   115  0008                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  000E                     	;# 
   123  000F                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0013                     	;# 
   128  0014                     	;# 
   129  0015                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001B                     	;# 
   137  001B                     	;# 
   138  001C                     	;# 
   139  001D                     	;# 
   140  001E                     	;# 
   141  001F                     	;# 
   142  0081                     	;# 
   143  0085                     	;# 
   144  0086                     	;# 
   145  0087                     	;# 
   146  0088                     	;# 
   147  0089                     	;# 
   148  008C                     	;# 
   149  008D                     	;# 
   150  008E                     	;# 
   151  0091                     	;# 
   152  0092                     	;# 
   153  0093                     	;# 
   154  0094                     	;# 
   155  0098                     	;# 
   156  0099                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  009F                     	;# 
   161  010C                     	;# 
   162  010D                     	;# 
   163  010E                     	;# 
   164  010F                     	;# 
   165  018C                     	;# 
   166  018D                     	;# 
   167  001E                     _ADRESH	set	30
   168  001F                     _ADCON0bits	set	31
   169  001F                     _ADCON0	set	31
   170  0015                     _CCPR1L	set	21
   171  00FA                     _GO_DONE	set	250
   172  00BD                     _CCP1X	set	189
   173  00BC                     _CCP1Y	set	188
   174  0092                     _TMR2ON	set	146
   175  0091                     _T2CKPS1	set	145
   176  0090                     _T2CKPS0	set	144
   177  00BA                     _CCP1M2	set	186
   178  00BB                     _CCP1M3	set	187
   179  009E                     _ADRESL	set	158
   180  009F                     _ADCON1	set	159
   181  0092                     _PR2	set	146
   182  043A                     _TRISC2	set	1082
   183                           
   184                           ; #config settings
   185  0000                     
   186                           	psect	cinit
   187  07FC                     start_initialization:	
   188  07FC                     __initialization:	
   189  07FC                     end_of_initialization:	
   190                           ;End of C runtime variable initialization code
   191                           
   192  07FC                     __end_of__initialization:	
   193  07FC  0183               	clrf	3
   194  07FD  120A  118A  2FAF   	ljmp	_main	;jump to C main() function
   195                           
   196                           	psect	cstackCOMMON
   197  0070                     __pcstackCOMMON:	
   198  0070                     ?_PWM1_Init:	
   199  0070                     ??_PWM1_Init:	
   200                           ; 1 bytes @ 0x0
   201                           
   202  0070                     ?_ADC_Init:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  0070                     ??_ADC_Init:	
   206                           ; 1 bytes @ 0x0
   207                           
   208  0070                     ?_main:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0070                     ?_ADC_Read:	
   212                           ; 1 bytes @ 0x0
   213                           
   214                           
   215                           ; 2 bytes @ 0x0
   216  0070                     	ds	2
   217  0072                     ??_ADC_Read:	
   218                           
   219                           ; 1 bytes @ 0x2
   220  0072                     	ds	2
   221  0074                     ADC_Read@ANC:	
   222                           
   223                           ; 1 bytes @ 0x4
   224  0074                     	ds	1
   225  0075                     ?_PWM1_Set_Duty:	
   226  0075                     PWM1_Set_Duty@DC:	
   227                           ; 1 bytes @ 0x5
   228                           
   229                           
   230                           ; 2 bytes @ 0x5
   231  0075                     	ds	2
   232  0077                     ??_PWM1_Set_Duty:	
   233                           
   234                           ; 1 bytes @ 0x7
   235  0077                     	ds	2
   236  0079                     ??_main:	
   237                           
   238                           ; 1 bytes @ 0x9
   239  0079                     	ds	1
   240                           
   241                           	psect	maintext
   242  07AF                     __pmaintext:	
   243 ;;
   244 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   245 ;;
   246 ;; *************** function _main *****************
   247 ;; Defined at:
   248 ;;		line 20 in file "main.c"
   249 ;; Parameters:    Size  Location     Type
   250 ;;		None
   251 ;; Auto vars:     Size  Location     Type
   252 ;;		None
   253 ;; Return value:  Size  Location     Type
   254 ;;                  1    wreg      void 
   255 ;; Registers used:
   256 ;;		wreg, status,2, status,0, pclath, cstack
   257 ;; Tracked objects:
   258 ;;		On entry : B00/0
   259 ;;		On exit  : 0/0
   260 ;;		Unchanged: 0/0
   261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   262 ;;      Params:         0       0       0       0       0
   263 ;;      Locals:         0       0       0       0       0
   264 ;;      Temps:          1       0       0       0       0
   265 ;;      Totals:         1       0       0       0       0
   266 ;;Total ram usage:        1 bytes
   267 ;; Hardware stack levels required when called:    1
   268 ;; This function calls:
   269 ;;		_ADC_Init
   270 ;;		_ADC_Read
   271 ;;		_PWM1_Init
   272 ;;		_PWM1_Set_Duty
   273 ;; This function is called by:
   274 ;;		Startup code after reset
   275 ;; This function uses a non-reentrant model
   276 ;;
   277                           
   278                           
   279                           ;psect for function _main
   280  07AF                     _main:	
   281                           
   282                           ;main.c: 22: PWM1_Init();
   283                           
   284                           ;incstack = 0
   285                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   286  07AF  120A  118A  2782  120A  118A  	fcall	_PWM1_Init
   287                           
   288                           ;main.c: 23: ADC_Init();
   289  07B4  120A  118A  2779  120A  118A  	fcall	_ADC_Init
   290  07B9                     l47:	
   291                           ;main.c: 24: while(1)
   292                           
   293                           
   294                           ;main.c: 25: {;main.c: 26: PWM1_Set_Duty(ADC_Read(0));
   295  07B9  3000               	movlw	0
   296  07BA  120A  118A  27D0  120A  118A  	fcall	_ADC_Read
   297  07BF  0871               	movf	?_ADC_Read+1,w
   298  07C0  00F6               	movwf	PWM1_Set_Duty@DC+1
   299  07C1  0870               	movf	?_ADC_Read,w
   300  07C2  00F5               	movwf	PWM1_Set_Duty@DC
   301  07C3  120A  118A  2791  120A  118A  	fcall	_PWM1_Set_Duty
   302                           
   303                           ;main.c: 27: _delay((unsigned long)((1)*(4000000/4000.0)));
   304  07C8  30C7               	movlw	199
   305  07C9  00F9               	movwf	??_main
   306  07CA                     u137:	
   307  07CA  2FCB               	nop2
   308  07CB  0BF9               	decfsz	??_main,f
   309  07CC  2FCA               	goto	u137
   310  07CD  2FCE               	nop2
   311  07CE  2FCF               	nop2
   312  07CF  2FB9               	goto	l47
   313  07D0                     __end_of_main:	
   314                           ;main.c: 28: };main.c: 29: return;
   315                           
   316                           
   317                           	psect	text1
   318  0791                     __ptext1:	
   319 ;; *************** function _PWM1_Set_Duty *****************
   320 ;; Defined at:
   321 ;;		line 48 in file "main.c"
   322 ;; Parameters:    Size  Location     Type
   323 ;;  DC              2    5[COMMON] unsigned int 
   324 ;; Auto vars:     Size  Location     Type
   325 ;;		None
   326 ;; Return value:  Size  Location     Type
   327 ;;                  1    wreg      void 
   328 ;; Registers used:
   329 ;;		wreg, status,2, status,0
   330 ;; Tracked objects:
   331 ;;		On entry : 0/0
   332 ;;		On exit  : 0/0
   333 ;;		Unchanged: 0/0
   334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   335 ;;      Params:         2       0       0       0       0
   336 ;;      Locals:         0       0       0       0       0
   337 ;;      Temps:          2       0       0       0       0
   338 ;;      Totals:         4       0       0       0       0
   339 ;;Total ram usage:        4 bytes
   340 ;; Hardware stack levels used:    1
   341 ;; This function calls:
   342 ;;		Nothing
   343 ;; This function is called by:
   344 ;;		_main
   345 ;; This function uses a non-reentrant model
   346 ;;
   347                           
   348                           
   349                           ;psect for function _PWM1_Set_Duty
   350  0791                     _PWM1_Set_Duty:	
   351                           
   352                           ;main.c: 51: if(DC<1024)
   353                           
   354                           ;incstack = 0
   355                           ; Regs used in _PWM1_Set_Duty: [wreg+status,2+status,0]
   356  0791  3004               	movlw	4
   357  0792  0276               	subwf	PWM1_Set_Duty@DC+1,w
   358  0793  3000               	movlw	0
   359  0794  1903               	skipnz
   360  0795  0275               	subwf	PWM1_Set_Duty@DC,w
   361  0796  1803               	skipnc
   362  0797  0008               	return
   363                           
   364                           ;main.c: 52: {;main.c: 53: CCP1Y = DC & 1;
   365  0798  1C75               	btfss	PWM1_Set_Duty@DC,0
   366  0799  2F9E               	goto	u110
   367  079A  1283               	bcf	3,5	;RP0=0, select bank0
   368  079B  1303               	bcf	3,6	;RP1=0, select bank0
   369  079C  1617               	bsf	23,4	;volatile
   370  079D  2FA1               	goto	u124
   371  079E                     u110:	
   372  079E  1283               	bcf	3,5	;RP0=0, select bank0
   373  079F  1303               	bcf	3,6	;RP1=0, select bank0
   374  07A0  1217               	bcf	23,4	;volatile
   375  07A1                     u124:	
   376                           
   377                           ;main.c: 54: CCP1X = DC & 2;
   378  07A1  1297               	bcf	23,5	;volatile
   379                           
   380                           ;main.c: 55: CCPR1L = DC >> 2;
   381  07A2  0876               	movf	PWM1_Set_Duty@DC+1,w
   382  07A3  00F8               	movwf	??_PWM1_Set_Duty+1
   383  07A4  0875               	movf	PWM1_Set_Duty@DC,w
   384  07A5  00F7               	movwf	??_PWM1_Set_Duty
   385  07A6  1003               	clrc
   386  07A7  0CF8               	rrf	??_PWM1_Set_Duty+1,f
   387  07A8  0CF7               	rrf	??_PWM1_Set_Duty,f
   388  07A9  1003               	clrc
   389  07AA  0CF8               	rrf	??_PWM1_Set_Duty+1,f
   390  07AB  0CF7               	rrf	??_PWM1_Set_Duty,f
   391  07AC  0877               	movf	??_PWM1_Set_Duty,w
   392  07AD  0095               	movwf	21	;volatile
   393  07AE  0008               	return
   394  07AF                     __end_of_PWM1_Set_Duty:	
   395                           
   396                           	psect	text2
   397  0782                     __ptext2:	
   398 ;; *************** function _PWM1_Init *****************
   399 ;; Defined at:
   400 ;;		line 34 in file "main.c"
   401 ;; Parameters:    Size  Location     Type
   402 ;;		None
   403 ;; Auto vars:     Size  Location     Type
   404 ;;		None
   405 ;; Return value:  Size  Location     Type
   406 ;;                  1    wreg      void 
   407 ;; Registers used:
   408 ;;		wreg
   409 ;; Tracked objects:
   410 ;;		On entry : 0/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   414 ;;      Params:         0       0       0       0       0
   415 ;;      Locals:         0       0       0       0       0
   416 ;;      Temps:          0       0       0       0       0
   417 ;;      Totals:         0       0       0       0       0
   418 ;;Total ram usage:        0 bytes
   419 ;; Hardware stack levels used:    1
   420 ;; This function calls:
   421 ;;		Nothing
   422 ;; This function is called by:
   423 ;;		_main
   424 ;; This function uses a non-reentrant model
   425 ;;
   426                           
   427                           
   428                           ;psect for function _PWM1_Init
   429  0782                     _PWM1_Init:	
   430                           
   431                           ;main.c: 37: CCP1M3 = 1;
   432                           
   433                           ;incstack = 0
   434                           ; Regs used in _PWM1_Init: [wreg]
   435  0782  1283               	bcf	3,5	;RP0=0, select bank0
   436  0783  1303               	bcf	3,6	;RP1=0, select bank0
   437  0784  1597               	bsf	23,3	;volatile
   438                           
   439                           ;main.c: 38: CCP1M2 = 1;
   440  0785  1517               	bsf	23,2	;volatile
   441                           
   442                           ;main.c: 39: TRISC2 = 0;
   443  0786  1683               	bsf	3,5	;RP0=1, select bank1
   444  0787  1303               	bcf	3,6	;RP1=0, select bank1
   445  0788  1107               	bcf	7,2	;volatile
   446                           
   447                           ;main.c: 41: PR2 = 255;
   448  0789  30FF               	movlw	255
   449  078A  0092               	movwf	18	;volatile
   450                           
   451                           ;main.c: 43: T2CKPS0 = 1;
   452  078B  1283               	bcf	3,5	;RP0=0, select bank0
   453  078C  1303               	bcf	3,6	;RP1=0, select bank0
   454  078D  1412               	bsf	18,0	;volatile
   455                           
   456                           ;main.c: 44: T2CKPS1 = 0;
   457  078E  1092               	bcf	18,1	;volatile
   458                           
   459                           ;main.c: 46: TMR2ON = 1;
   460  078F  1512               	bsf	18,2	;volatile
   461  0790  0008               	return
   462  0791                     __end_of_PWM1_Init:	
   463                           
   464                           	psect	text3
   465  07D0                     __ptext3:	
   466 ;; *************** function _ADC_Read *****************
   467 ;; Defined at:
   468 ;;		line 65 in file "main.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;  ANC             1    wreg     unsigned char 
   471 ;; Auto vars:     Size  Location     Type
   472 ;;  ANC             1    4[COMMON] unsigned char 
   473 ;; Return value:  Size  Location     Type
   474 ;;                  2    0[COMMON] unsigned int 
   475 ;; Registers used:
   476 ;;		wreg, status,2, status,0
   477 ;; Tracked objects:
   478 ;;		On entry : 0/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   482 ;;      Params:         2       0       0       0       0
   483 ;;      Locals:         1       0       0       0       0
   484 ;;      Temps:          2       0       0       0       0
   485 ;;      Totals:         5       0       0       0       0
   486 ;;Total ram usage:        5 bytes
   487 ;; Hardware stack levels used:    1
   488 ;; This function calls:
   489 ;;		Nothing
   490 ;; This function is called by:
   491 ;;		_main
   492 ;; This function uses a non-reentrant model
   493 ;;
   494                           
   495                           
   496                           ;psect for function _ADC_Read
   497  07D0                     _ADC_Read:	
   498                           
   499                           ;incstack = 0
   500                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
   501                           ;ADC_Read@ANC stored from wreg
   502  07D0  00F4               	movwf	ADC_Read@ANC
   503                           
   504                           ;main.c: 67: if(ANC<0 || ANC>7)
   505  07D1  3008               	movlw	8
   506  07D2  0274               	subwf	ADC_Read@ANC,w
   507  07D3  1C03               	skipc
   508  07D4  2FD8               	goto	l625
   509                           
   510                           ;main.c: 68: { return 0;}
   511  07D5  01F0               	clrf	?_ADC_Read
   512  07D6  01F1               	clrf	?_ADC_Read+1
   513  07D7  0008               	return
   514  07D8                     l625:	
   515                           
   516                           ;main.c: 69: ADCON0 &= 0x11000101;
   517  07D8  3001               	movlw	1
   518  07D9  00F2               	movwf	??_ADC_Read
   519  07DA  0872               	movf	??_ADC_Read,w
   520  07DB  1283               	bcf	3,5	;RP0=0, select bank0
   521  07DC  1303               	bcf	3,6	;RP1=0, select bank0
   522  07DD  059F               	andwf	31,f	;volatile
   523                           
   524                           ;main.c: 70: ADCON0 |= ANC<<3;
   525  07DE  0874               	movf	ADC_Read@ANC,w
   526  07DF  00F2               	movwf	??_ADC_Read
   527  07E0  3002               	movlw	2
   528  07E1                     u85:	
   529  07E1  1003               	clrc
   530  07E2  0DF2               	rlf	??_ADC_Read,f
   531  07E3  3EFF               	addlw	-1
   532  07E4  1D03               	skipz
   533  07E5  2FE1               	goto	u85
   534  07E6  1003               	clrc
   535  07E7  0D72               	rlf	??_ADC_Read,w
   536  07E8  00F3               	movwf	??_ADC_Read+1
   537  07E9  0873               	movf	??_ADC_Read+1,w
   538  07EA  049F               	iorwf	31,f	;volatile
   539                           
   540                           ;main.c: 72: _delay((unsigned long)((30)*(4000000/4000000.0)));
   541  07EB  3009               	movlw	9
   542  07EC  00F2               	movwf	??_ADC_Read
   543  07ED                     u147:	
   544  07ED  0BF2               	decfsz	??_ADC_Read,f
   545  07EE  2FED               	goto	u147
   546  07EF  2FF0               	nop2
   547                           
   548                           ;main.c: 73: GO_DONE = 1;
   549  07F0  1283               	bcf	3,5	;RP0=0, select bank0
   550  07F1  1303               	bcf	3,6	;RP1=0, select bank0
   551  07F2  151F               	bsf	31,2	;volatile
   552  07F3                     l65:	
   553                           ;main.c: 74: while(ADCON0bits.GO_DONE);
   554                           
   555  07F3  191F               	btfsc	31,2	;volatile
   556  07F4  2FF3               	goto	l65
   557                           
   558                           ;main.c: 76: return ((ADRESH << 8) + ADRESL);
   559  07F5  081E               	movf	30,w	;volatile
   560  07F6  00F1               	movwf	?_ADC_Read+1
   561  07F7  1683               	bsf	3,5	;RP0=1, select bank1
   562  07F8  1303               	bcf	3,6	;RP1=0, select bank1
   563  07F9  081E               	movf	30,w	;volatile
   564  07FA  00F0               	movwf	?_ADC_Read
   565  07FB  0008               	return
   566  07FC                     __end_of_ADC_Read:	
   567                           
   568                           	psect	text4
   569  0779                     __ptext4:	
   570 ;; *************** function _ADC_Init *****************
   571 ;; Defined at:
   572 ;;		line 59 in file "main.c"
   573 ;; Parameters:    Size  Location     Type
   574 ;;		None
   575 ;; Auto vars:     Size  Location     Type
   576 ;;		None
   577 ;; Return value:  Size  Location     Type
   578 ;;                  1    wreg      void 
   579 ;; Registers used:
   580 ;;		wreg
   581 ;; Tracked objects:
   582 ;;		On entry : 0/0
   583 ;;		On exit  : 0/0
   584 ;;		Unchanged: 0/0
   585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   586 ;;      Params:         0       0       0       0       0
   587 ;;      Locals:         0       0       0       0       0
   588 ;;      Temps:          0       0       0       0       0
   589 ;;      Totals:         0       0       0       0       0
   590 ;;Total ram usage:        0 bytes
   591 ;; Hardware stack levels used:    1
   592 ;; This function calls:
   593 ;;		Nothing
   594 ;; This function is called by:
   595 ;;		_main
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           
   600                           ;psect for function _ADC_Init
   601  0779                     _ADC_Init:	
   602                           
   603                           ;main.c: 61: ADCON0 = 0x41;
   604                           
   605                           ;incstack = 0
   606                           ; Regs used in _ADC_Init: [wreg]
   607  0779  3041               	movlw	65
   608  077A  1283               	bcf	3,5	;RP0=0, select bank0
   609  077B  1303               	bcf	3,6	;RP1=0, select bank0
   610  077C  009F               	movwf	31	;volatile
   611                           
   612                           ;main.c: 62: ADCON1 = 0x80;
   613  077D  3080               	movlw	128
   614  077E  1683               	bsf	3,5	;RP0=1, select bank1
   615  077F  1303               	bcf	3,6	;RP1=0, select bank1
   616  0780  009F               	movwf	31	;volatile
   617  0781  0008               	return
   618  0782                     __end_of_ADC_Init:	
   619  007E                     btemp	set	126	;btemp
   620  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_PWM1_Set_Duty
    _PWM1_Set_Duty->_ADC_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     163
                                              9 COMMON     1     1      0
                           _ADC_Init
                           _ADC_Read
                          _PWM1_Init
                      _PWM1_Set_Duty
 ---------------------------------------------------------------------------------
 (1) _PWM1_Set_Duty                                        4     2      2     119
                                              5 COMMON     4     2      2
                           _ADC_Read (ARG)
 ---------------------------------------------------------------------------------
 (1) _PWM1_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             5     3      2      44
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _PWM1_Init
   _PWM1_Set_Duty
     _ADC_Read (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Jun 22 17:41:30 2019

            __CFG_CP$OFF 0000                       l47 07B9                       l65 07F3  
                     u85 07E1                      l625 07D8                      u110 079E  
                    u124 07A1                      u137 07CA                      u147 07ED  
                    _PR2 0092             __CFG_CPD$OFF 0000             __CFG_FOSC$XT 0000  
           __CFG_LVP$OFF 0000             __CFG_WRT$OFF 0000                     _main 07AF  
                   btemp 007E         __end_of_ADC_Init 0782         __end_of_ADC_Read 07FC  
          __CFG_BOREN$ON 0000                     start 0000                    ?_main 0070  
                  _CCP1X 00BD                    _CCP1Y 00BC            __CFG_WDTE$OFF 0000  
          __CFG_PWRTE$ON 0000       __size_of_PWM1_Init 000F                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 07D0  
                 ??_main 0079                   _ADCON0 001F                   _ADCON1 009F  
                 _CCP1M2 00BA                   _CCP1M3 00BB                   _ADRESH 001E  
                 _ADRESL 009E                   _CCPR1L 0015                   _TMR2ON 0092  
                 _TRISC2 043A        __end_of_PWM1_Init 0791                ?_ADC_Init 0070  
              ?_ADC_Read 0070  __end_of__initialization 07FC           __pcstackCOMMON 0070  
  __end_of_PWM1_Set_Duty 07AF               ??_ADC_Init 0070               ??_ADC_Read 0072  
             __pmaintext 07AF                  _T2CKPS0 0090                  _T2CKPS1 0091  
                _GO_DONE 00FA                  __ptext1 0791                  __ptext2 0782  
                __ptext3 07D0                  __ptext4 0779     end_of_initialization 07FC  
              _PWM1_Init 0782        __size_of_ADC_Init 0009        __size_of_ADC_Read 002C  
             ?_PWM1_Init 0070      start_initialization 07FC                ___latbits 0002  
 __size_of_PWM1_Set_Duty 001E              ??_PWM1_Init 0070                 _ADC_Init 0779  
               _ADC_Read 07D0              ADC_Read@ANC 0074            _PWM1_Set_Duty 0791  
             _ADCON0bits 001F           ?_PWM1_Set_Duty 0075            __size_of_main 0021  
        ??_PWM1_Set_Duty 0077          PWM1_Set_Duty@DC 0075  
